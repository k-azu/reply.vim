*reply.txt*           REPLs play nicely with :terminal

Author : rhysd <lin90162@yahoo.co.jp>

CONTENTS                *reply-contents*

Introduction            |reply-introduction|
Install                 |reply-install|
Commands                |reply-commands|
Mappings                |reply-mappings|
Variables               |reply-variables|
Repository              |reply-repository-page|
License                 |reply-license|


==============================================================================
INTRODUCTION                                                *reply-introduction*

*reply.vim* is a Vim and Neovim plugin to make edit buffers play with REPLs
nicely.

- REPLs are run in ":terminal" window
- Interaction between edit buffer and REPL
  - Send source from/to edit buffer to/from REPL
  - Automatically evaluate edit buffer with REPL in realtime
- REPL can be selected by filetype with availability
  - e.g. For "ruby" filetype, "pry" is used if available. Otherwise "irb"
- More than 40 REPLs are supported by default
- Your own REPL can be added
- Supports both Vim (8+) and Neovim
- Tested

REPL is useful to learn/confirm APIs and language features promptly. I usually
split a new Tmux pane and started a new REPL. However, in terms of reuse of
input code in REPL, I needed to copy the code from the Tmux pane to Vim via
clipboard or simply to input it again in Vim.

|reply.vim| was created to improve the experience to use REPLs while editing
some code in Vim.


==============================================================================
INSTALL                                                          *reply-install*

If you use any package manager, please follow its instruction.

With vim-plug:
>
  Plug 'rhysd/reply.vim', { 'on': ['Repl', 'ReplAuto'] }
<
With dein.vim:
>
  call dein#add('rhysd/reply.vim', {
              \   'lazy' : 1,
              \   'on_cmd' : ['Repl', 'ReplAuto'],
              \ })
<
With minpac:
>
  call minpac#add('rhysd/reply.vim')
<
If you're using Vim's builtin packager, please follow instruction at |pack-add|.

vim-plug: https://github.com/junegunn/vim-plug
dein.vim: https://github.com/Shougo/dein.vim
minpac: https://github.com/k-takata/minpac


==============================================================================
COMMANDS                                                        *reply-commands*

*:Repl* opens REPL

  :Repl

    Without any arguments, it opens REPL for current filetype as a new
    terminal window with |:terminal|.

  :Repl {REPL}

    Open REPL specified by name. Supported REPL's names are listed in output
    of |:ReplList|.

  :Repl {REPL} {args...}

    Open REPL specified by name with any arguments. Arguments will be passed
    to underlying command execution of the REPL.

  :[range]Repl [{REPL} [{args...}]]

    In visual mode, `:Repl` opens a REPL and sending the selected text to REPL.
    It is useful when you want to start a REPL with some code in the edit
    buffer.

  :<mod> Repl [{REPL} [{args...}]]

  |:Repl| supports |<mods>| to specify how to open a terminal window. For example,
  following command opens a terminal window for REPL by splitting the window
  horizontally.
>
    :botright Repl
<
------------------------------------------------------------------------------

*:ReplSend* sends lines from edit buffer to REPL

  :ReplSend

    Send the current line in edit buffer to REPL running in a terminal window.
    This command is available in an edit buffer.

  :[range]ReplSend

    In visual mode, selected text is sent to REPL running in a terminal
    window.

------------------------------------------------------------------------------

*:ReplRecv* receives lines from REPL in edit buffer

  :ReplRecv

    Sends input codes in REPL to edit buffer. This command is available in
    both a terminal window and an edit buffer.

  :[range]ReplRecv

    In visual mode, selected text in REPL is sent to edit buffer. Visual mode
    support is only available in a terminal window.

------------------------------------------------------------------------------

*:ReplStop* closes REPL

  :ReplStop

    It closes the terminal window. It is available in both an edit buffer and
    a terminal window. |reply.vim| remembers which REPL terminal window was
    opened from which edit buffer.

------------------------------------------------------------------------------

*:ReplList* shows list of available REPLs

  :ReplList

    It shows a list of REPLs and their filetypes with syntax highlights.
    Unavailable REPLs are colored with "Comment" highlight group.

------------------------------------------------------------------------------

*:ReplAuto* binds input to edit buffer with REPL

  :ReplAuto [{REPL} [{args...}]]

    It is similar to |:Repl|, but it binds input to the edit buffer with opened
    REPL. All inputs are automatically sent to REPL and evaluated when you
    type an enter key in the edit buffer.

    It is useful for lazy people who want to write some code with confirming
    the value. But please be careful not to break your environment by sending
    a dangerous code to REPL. This feature is supposed to be used for learning
    a new language.

  Note: This feature is experimental


==============================================================================
MAPPINGS                                                        *reply-mappings*

No mapping is defined by default. Please allocate the commands to your
favorite keys.


==============================================================================
VARIABLES                                                      *reply-variables*

reply_repls                                      *g:reply_repls* , *b:reply_repls*

Type: |dict| (|string| => |list|< |string| or |funcref| >")
Default value: "{}"

Dictionary from filetype to list of REPL names. The list is candidates to open
on the filetype. For example, following configuration will use only "irb" for
"ruby" filetype even if "pry" is available on your system.
>
    let g:reply_repls = {
    \   'ruby': ['irb']
    \ }
<
For filetypes not specified in |g:reply_repls|, |reply.vim| uses default values
defined at top of reply.vim/autoload/reply/lifecycle.vim

For an element of the list, function value is also available to define your
own REPL.

For example, let's say you have your own "mycalc" REPL which shows a prompt
"calc> ".
>
    function! s:define_mycalc_repl() abort
        return reply#repl#base('mycalc', {
            \   'prompt_start' : '^calc> ',
            \   'prompt_continue' : v:null,
            \ })
    endfunction

    let g:reply_repls = {
    \   'text': [function('s:define_mycalc_repl')],
    \ }
<
It opens your "mycalc" command by ":Repl" in "text" filetype or
":Repl mycalc".

Lambda expression is also available to avoid defining functions for each your
REPLs.
>
    let g:reply_repls = {
    \   'text': [
    \     {-> reply#repl#base('mycalc', {
    \       'prompt_start' : '^calc> ',
    \       'prompt_continue' : v:null,
    \     })}
    \   ],
    \ }
<
For usage of reply#repl#base() function, please read codes for default REPL
supports at reply.vim/autoload/reply/repl/

|b:reply_repls| is a buffer-local variable which overwrites |g:reply_repls|
locally.

------------------------------------------------------------------------------
reply_termwin_max_height
reply_termwin_max_width
                                                    *g:reply_termwin_max_height*
                                                    *b:reply_termwin_max_height*
                                                     *g:reply_termwin_max_width*
                                                     *b:reply_termwin_max_width*

Type: |number|
Default value: undefined

Specify max lines and colmuns of a terminal window opened by |:Repl| and
|:ReplAuto|. It is useful to avoid consuming too wide space by REPL.

|b:reply_termwin_max_height| and |b:reply_termwin_max_width| are buffer-local
version of the variables.


==============================================================================
REPOSITORY                                               *reply-repository-page*

|reply.vim| is developed at GitHub. Please make a new issue or PR to
participate development.

https://github.com/rhysd/reply.vim


==============================================================================
LICENSE                                                          *reply-license*

|reply.vim| is distributed under The MIT license.

  Copyright (c) 2018 rhysd

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


==============================================================================
vim:tw=78:ts=8:ft=help:norl:et:fen:fdl=0:
